Go: a simple programming environment

23 April 2013

Andrew Gerrand
Google Inc.
@enneff
adg@golang.org
http://golang.org

* Why Go?

- Software should be simple

* Why Go?

- Software *can* be simple

* What I mean by "simple"

- Consistent
- Orthogonal
- Predictable
- Useful by default
- Readable

* Go at a glance

- Open source
- Statically typed
- Simple type system
- Concurrency primitives
- Clean syntax
- Rich standard library
- Great tools

This talk is just a taste.

* The Gopher

.image support/gopher.jpg

* Hello, Go

.play support/hello.go

* go

Goroutines are lightweight threads that are managed by the Go runtime.
To run a function in a new goroutine, just put `"go"` before the function call.

.play support/goroutines.go

* chan

Goroutines communicate via channels. A channel is a typed conduit, like a Unix pipe.

.play support/chan.go

* sync

Channels are great, but sometimes other concurrency mechanisms are a better fit.
The `sync` package provides mutexes, condition variables, and more useful primitives.

TODO: example

* time

The `time` package provides `Time` and `Duration` types, for expressing instants in time and periods of time.

.play support/time.go /START/,/END/

It also provides a `Location` type for expressing time zones.

.play support/time2.go /START/,/END/

And, as we've already seen, it provides functions related to sleeping.

* net/http (1/2)

The `net/http` package provides an HTTP client.

.play support/http-client.go /func main/,$

The client handles HTTP `Keep-Alive` using a pool of connections, by default.
(This is configurable, of course.)

* net/http (2/2)

The `net/http` package also provides an HTTP server.

.play support/http-server.go /const/,$

This is a high-performance, DoS-hardened, production-ready web server.

It serves `dl.google.com`.

* html/template 

The `html/template` package provides an HTML templating system that automatically escapes content depending on its context.

.play support/template.go /const/,$

* flag 

The `flag` package provides a simple API for parsing command-line flags.

.play support/flag.go /var/,$

Example invocation (a little different to GNU getopt):

	$ flag -message 'Hold on...' -delay 5m

* An example

.link http://isgo1point1outyet.com

.image support/screenshot.png

* Structure

The program has two parts that execute concurrently:

- a poller that continuously checks whether Go 1.1 has been tagged, and
- an HTTP server providing the user interface.

* Sharing state

We must share state ("Is Go 1.1 out?") between the repo poller and the user interface.

This global struct variable contains a `sync.RWMutex` and a boolean value:

.code main.go /var state/,/^}/

To read, take the read lock (multiple goroutines can do this simultaneously):
	
	state.RLock()
	yes := state.yes
	state.RUnlock()

To write, take the write lock (only one goroutine can do this at a time):

	state.Lock()
	state.yes = true
	state.Unlock()

* Polling (1/2)

When a `go1.1` tag exists in the Go repository this URL will return a `"200`OK"` response:
	
.code main.go /const changeURL/

The `isTagged` function returns `true` if the `go1.1` tag exists.

.code main.go /func isTagged/,/^}/

* Polling (2/2)

The `poll` function loops until `isTagged` returns `true`.
Then it updates the state ("Go 1.1 is out!") and returns.

.code main.go /func poll/,/^}/

* The HTML user interface

The `tmpl` variable is a template that provides the HTML UI.
It is a global variable, so the template is parsed just once at init time.

.code main.go /var tmpl/,/^`/

* Serving the user interface

The `handler` function is an `http.HandlerFunc`; it serves an HTTP request.
It puts the `state.yes` and `changeURL` values into a struct,
and uses it to render the template as the HTTP response.

.code main.go /func handler/,/^}/

* Putting it all together

The `main` function starts polling in a new goroutine and sets up the web server.
Some command-line flags enable run time configuration.

.code main.go /var \(/,/^}/

The whole program is just 68 lines of code.

* Conclusion

* Learn more about Go

The Go web site 

- [[http://golang.org][golang.org]]

The Go blog

- [[http://blog.golang.org][blog.golang.org]]

Go talks

- [[http://talks.golang.org][talks.golang.org]]

A Tour of Go

- [[http://tour.golang.org][tour.golang.org]]

